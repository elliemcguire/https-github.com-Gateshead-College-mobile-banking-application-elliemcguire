package mobilebanking;import org.sqlite.SQLiteConfig;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class InitDB {    public static Connection initialiseDB() {        Connection con = null;        try {            Class.forName("org.sqlite.JDBC");            SQLiteConfig config = new SQLiteConfig();            config.enforceForeignKeys(true);            con = DriverManager.getConnection("jdbc:sqlite:C:\\Users\\elizabeth.mcguire\\IdeaProjects\\JavaProjects\\src\\mobilebanking\\Bankingdb.db", config.toProperties());        } catch (ClassNotFoundException cnfEx) {            cnfEx.printStackTrace();            System.out.println("The SQLite class could not be found.");            System.out.println("Are you missing a dependency?");            System.out.println("You can download the required class from - https://github.com/xerial/sqlite-jdbc/releases");        } catch (SQLException sqlEx) {            sqlEx.printStackTrace();            System.out.println("An SQL Exception has been encountered");            System.out.println("Make sure you are connected to the internet and/or update the location of the database in the settings");        } finally {        }        return con;    }    private static void createUsersTable(Connection con) throws SQLException {        Statement s = null;        try {            s = con.createStatement();            String createUserTable = "CREATE TABLE IF NOT EXISTS tblUsers " +                    "(USER_ID INTEGER PRIMARY KEY AUTOINCREMENT," +                    " USER_FORENAME TEXT WILL NOT NULL," +                    " USER_SURNAME TEXT WILL NOT NULL," +                    " USER_USERNAME TEXT WILL NOT NULL," +                    " USER_PASSWORD TEXT WILL NOT NULL)";            s.executeUpdate(createUserTable);        } catch (SQLException sqlex) {            sqlex.printStackTrace();            System.out.println("Error encountered when creating users table");        } finally {            s.close();            con.close();        }    }    public static void createAccountsTable(Connection con) throws SQLException {        Statement s = null;        try {            s = con.createStatement();            String createAccountsTable = "CREATE TABLE IF NOT EXISTS tblAccounts " +                    "(ACCOUNT_NUMBER INTEGER PRIMARY KEY AUTOINCREMENT," +                    " ACCOUNT_BALANCE REAL NOT NULL," +                    " ACCOUNT_TYPE TEXT NOT NULL," +                    " ACCOUNT_USER_ID INTEGER," +                    " FOREIGN KEY (ACCOUNT_USER_ID) REFERENCES tblUsers(USER_id))";            s.executeUpdate(createAccountsTable);        } catch (SQLException sqlex) {            sqlex.printStackTrace();            System.out.println("Error encountered when creating accounts table");        } finally {            s.close();            con.close();        }    }    public static void createTransactionsTable(Connection con) throws SQLException {        Statement s = null;        try {            s = con.createStatement();            String createTransactionsTable = "CREATE TABLE IF NOT EXISTS tblTransactions " +                    "(TRANSACTION_ID INTEGER PRIMARY KEY AUTOINCREMENT," +                    " TRANSACTION_DATE TEXT NOT NULL," +                    " TRANSACTION_PAYEE TEXT NOT NULL," +                    " TRANSACTION_AMOUNT REAL NOT NULL," +                    " TRANSACTION_ACCOUNT_NUMBER INTEGER," +                    " FOREIGN KEY (TRANSACTION_ACCOUNT_NUMBER) REFERENCES tblAccounts(ACCOUNT_NUMBER))";            s.executeUpdate(createTransactionsTable);        } catch (SQLException sqlex) {            sqlex.printStackTrace();            System.out.println("Error encountered when creating transactions table");        } finally {            s.close();            con.close();        }    }        public static void databaseStartup() throws SQLException {            createUsersTable(initialiseDB());            createAccountsTable(initialiseDB());            createTransactionsTable(initialiseDB());        }}